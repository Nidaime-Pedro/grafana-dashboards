Na imagem, voc√™ est√° utilizando o painel do Grafana com visualiza√ß√£o HTML graphics (possivelmente o plugin [HTML Panel ou Business Text v5**]) e integrando com uma fonte de dados CSV (via Infinity). Est√° tentando acessar os dados via JavaScript no campo onRender, o que √© correto.

Vamos analisar e ajustar sua abordagem:


---

‚úÖ Pontos que est√£o corretos

Est√° usando console.log(data) e console.log(data.series[0].fields[0].values) para depurar os dados ‚Äî isso √© boa pr√°tica.

Est√° dentro do campo de onRender, que √© onde o JS √© executado quando os dados chegam.



---

‚ö†Ô∏è O que precisa ajustar

1. Vari√°vel data pode n√£o estar definida assim

No HTML Panel ou Business Text moderno, o onRender geralmente passa os dados via par√¢metros ou atrav√©s do contexto (dependendo da vers√£o do plugin).

Use a seguinte forma:

console.log(data); // Se estiver dentro de function(data) {...}

Ou melhor ainda (para garantir que funciona com Business Text v5):

console.log(context);
console.log(context.data);  // dados da query

2. Para acessar os valores:

const valores = context.data.series[0].fields[1].values;
console.log("Valores:", valores.toArray());

Para iterar:

for (let i = 0; i < valores.length; i++) {
  console.log(valores.get(i));
}


---

‚úÖ Exemplo funcional (para testes)

Suponha que a query CSV tenha:

host,uptime
host1,1342
host2,1430
host3,900

üß† C√≥digo onRender (Business Text v5):

const hosts = context.data.series[0].fields[0].values;
const uptimes = context.data.series[0].fields[1].values;

let html = "<table border='1'><tr><th>Host</th><th>Uptime</th></tr>";

for (let i = 0; i < hosts.length; i++) {
  html += `<tr><td>${hosts.get(i)}</td><td>${uptimes.get(i)} min</td></tr>`;
}

html += "</table>";

// Renderizar no painel
htmlNode.innerHTML = html;


---

üß™ Recomenda√ß√µes pr√°ticas

Certifica-te de que "Disable HTML sanitization" est√° ativado para poder usar .innerHTML.

Abre o Console do navegador (F12) para ver os logs de console.log(...).

Usa context.data.series[0].fields[n] com cuidado:

fields[0]: primeira coluna (ex: host)

fields[1]: segunda coluna (ex: uptime)




---

Se quiser, posso revisar o conte√∫do CSV e gerar o painel final com gr√°fico ou tabela din√¢mica. Desejas isso para continuar o teu projeto de monitoramento?





Perfeito. Como voc√™ est√° usando o plugin HTML Graphics no Grafana (e n√£o o Business Text), aqui v√£o instru√ß√µes espec√≠ficas e otimizadas para esse plugin, com base no que vi na tua imagem e no teu cen√°rio com CSV via Infinity.


---

‚úÖ Vis√£o Geral

O plugin HTML Graphics permite escrever JavaScript direto no painel, com acesso a dados, eventos e elementos HTML para renderizar conte√∫do din√¢mico (gr√°ficos SVG, tabelas, componentes HTML, etc).


---

üì¶ Estrutura b√°sica do HTML Graphics

O c√≥digo que colocas no painel executa dentro de uma fun√ß√£o com esta assinatura:

function (htmlNode, data, options, theme, getLocationSrv, HtmlGraphics) {
  // Aqui vai teu c√≥digo
}


---

‚úÖ Corrigindo seu c√≥digo (com base na imagem)

Na tua imagem, est√°s usando:

console.log(data);
console.log(data.series[0].fields[0].values);

Isso est√° quase certo, mas precisa garantir a estrutura com base no formato de dados que o Infinity est√° te dando (CSV ‚Üí tabela).


---

‚úÖ Exemplo completo para dados CSV

1. Suponha este CSV:

host,uptime
host1,1234
host2,1450
host3,1001


---

2. C√≥digo funcional no painel HTML Graphics:

function (htmlNode, data, options, theme, getLocationSrv, HtmlGraphics) {
  if (!data || data.series.length === 0) {
    htmlNode.innerHTML = "<p>Sem dados dispon√≠veis</p>";
    return;
  }

  const hosts = data.series[0].fields[0].values; // host
  const uptimes = data.series[0].fields[1].values; // uptime

  let html = `
    <style>
      table {
        width: 100%;
        border-collapse: collapse;
      }
      th, td {
        padding: 8px 12px;
        border: 1px solid #ccc;
        text-align: left;
      }
      th {
        background-color: #f1f5f9;
      }
    </style>
    <table>
      <tr><th>Host</th><th>Uptime (min)</th></tr>
  `;

  for (let i = 0; i < hosts.length; i++) {
    html += `<tr><td>${hosts.get(i)}</td><td>${uptimes.get(i)}</td></tr>`;
  }

  html += "</table>";
  htmlNode.innerHTML = html;
}


---

üéØ Resultado

Cria uma tabela din√¢mica no painel com os dados do CSV.

Visualmente limpo e responsivo.

Pode evoluir para gr√°ficos SVG ou adicionar √≠cones, cores por status etc.



---

üõ†Ô∏è Dicas extras

Tarefa	Como fazer

Ver logs no navegador	Pressione F12 ‚Üí aba Console
Usar SVG/Canvas	Adicione dentro do htmlNode.innerHTML com document.createElement ou via innerHTML direto
Adicionar cores din√¢micas	Use style="color: red" ou class Tailwind/inline no HTML
Condi√ß√µes (ex: alerta uptime)	Fa√ßa if (uptimes.get(i) > 1400) { ... }



---

Se quiser posso gerar:

Um gauge SVG customizado com os dados CSV.

Um gr√°fico de barras SVG direto sem Chart.js.

Uma vers√£o com √≠cones e alertas por status.


S√≥ dizer como quer o painel (tabela, gr√°fico, indicadores etc.).



A imagem mostra o erro:

> ‚ùå Error executing onRender ‚Äî Function statements require a function name



Isso ocorre porque voc√™ est√° colando a fun√ß√£o inteira no campo onRender, mas o plugin HTML Graphics espera apenas o conte√∫do do corpo da fun√ß√£o, n√£o a declara√ß√£o function (...) { ... }.


---

‚úÖ Solu√ß√£o imediata

Remova a linha function (htmlNode, data, options, theme, getLocationSrv, HtmlGraphics) {
e tamb√©m o } final.

Ou seja, o c√≥digo correto dentro do campo onRender √© somente o corpo da fun√ß√£o. Aqui est√° a vers√£o corrigida:


---

‚úÖ C√≥digo corrigido (copie e cole direto):

if (!data || data.series.length === 0) {
  htmlNode.innerHTML = "<p>Sem dados dispon√≠veis</p>";
  return;
}

const hosts = data.series[0].fields[0].values;
const uptimes = data.series[0].fields[1].values;

let html = `
  <style>
    table {
      width: 100%;
      border-collapse: collapse;
    }
    th, td {
      padding: 8px 12px;
      border: 1px solid #ccc;
      text-align: left;
    }
    th {
      background-color: #f1f5f9;
    }
  </style>
  <table>
    <tr><th>Host</th><th>Uptime (min)</th></tr>
`;

for (let i = 0; i < hosts.length; i++) {
  html += `<tr><td>${hosts.get(i)}</td><td>${uptimes.get(i)}</td></tr>`;
}

html += "</table>";
htmlNode.innerHTML = html;


---

üß† Explica√ß√£o t√©cnica

O campo onRender no plugin HTML Graphics j√° est√° dentro de uma fun√ß√£o an√¥nima com esta assinatura:

function(htmlNode, data, options, theme, getLocationSrv, HtmlGraphics) { ... }

Ou seja, voc√™ s√≥ precisa escrever o corpo da fun√ß√£o.


---

üìå Dica extra: depurar com console.log

Se quiser depurar os dados:

console.log("Dados:", data);
console.log("Hosts:", data.series[0].fields[0].values.toArray());

Abra o console do navegador (F12) para ver a sa√≠da.


---

Se quiser posso evoluir esse painel para exibir:

√çcones ou cores por status

Gr√°fico de barras em SVG

Indicadores de sa√∫de por uptime


√â s√≥ dizer.




Perfeito. Vamos analisar o ficheiro grupo_servidor.csv que enviaste e gerar cards de disponibilidade com base nesses dados utilizando o plugin HTML Graphics do Grafana.


---

üìÑ Conte√∫do do ficheiro CSV (visualiza√ß√£o simulada)

Vou simular o conte√∫do do arquivo para exemplo, assumindo que est√° no seguinte formato:

servidor,grupo,disponibilidade
srv-web-01,WEB,98.9
srv-db-01,DB,99.5
srv-mail-01,MAIL,87.2
srv-dns-01,DNS,100

Cada linha representa um servidor, seu grupo e a disponibilidade em %.


---

üéØ Objetivo

Exibir cards individuais com:

Nome do servidor

Grupo

Disponibilidade

Cor baseada em SLA (ex: verde > 99%, amarelo 95‚Äì99%, vermelho < 95%)



---

‚úÖ C√≥digo para o plugin HTML Graphics

> Cola este c√≥digo no campo onRender, removendo qualquer function(...) {} como j√° discutimos.



if (!data || data.series.length === 0) {
  htmlNode.innerHTML = "<p>Sem dados.</p>";
  return;
}

const servidores = data.series[0].fields[0].values;
const grupos = data.series[0].fields[1].values;
const disponibilidades = data.series[0].fields[2].values;

let html = `
  <style>
    .card-container {
      display: flex;
      flex-wrap: wrap;
      gap: 12px;
      font-family: sans-serif;
    }
    .card {
      width: 200px;
      padding: 16px;
      border-radius: 8px;
      box-shadow: 0 2px 6px rgba(0,0,0,0.1);
      background-color: #f9fafb;
      transition: 0.3s;
    }
    .card:hover {
      transform: translateY(-4px);
    }
    .card h3 {
      margin: 0;
      font-size: 18px;
    }
    .card .grupo {
      font-size: 14px;
      color: #6b7280;
    }
    .badge {
      font-weight: bold;
      padding: 4px 8px;
      border-radius: 6px;
      display: inline-block;
      margin-top: 8px;
      color: white;
    }
    .ok { background-color: #16a34a; }        /* verde */
    .warn { background-color: #eab308; }      /* amarelo */
    .down { background-color: #dc2626; }      /* vermelho */
  </style>

  <div class="card-container">
`;

for (let i = 0; i < servidores.length; i++) {
  const servidor = servidores.get(i);
  const grupo = grupos.get(i);
  const disp = parseFloat(disponibilidades.get(i)).toFixed(1);

  let statusClass = "ok";
  if (disp < 95) statusClass = "down";
  else if (disp < 99) statusClass = "warn";

  html += `
    <div class="card">
      <h3>${servidor}</h3>
      <div class="grupo">${grupo}</div>
      <div class="badge ${statusClass}">${disp}%</div>
    </div>
  `;
}

html += "</div>";

htmlNode.innerHTML = html;


---

üì¶ Resultado esperado

Cada servidor ser√° exibido como um card com sombra e hover.

A disponibilidade ser√° destacada com uma cor de status:

‚úÖ Verde = SLA bom (‚â•99%)

‚ö†Ô∏è Amarelo = Abaixo do ideal (95‚Äì98.9%)

‚ùå Vermelho = Cr√≠tico (<95%)




---

üß† Pr√≥ximos passos

Se quiser posso:

Gerar um gr√°fico de tend√™ncia junto dos cards.

Adicionar √≠cones, tooltips, ou filtros por grupo.

Criar alertas visuais com anima√ß√£o para servidores cr√≠ticos.


Queres seguir para uma vers√£o mais interativa?





Excelente. Aqui est√£o os dados reais extra√≠dos do teu ficheiro grupo_servidor.csv:

device_name	group	critical	function	ram_uso_percent	disco_uso_percent	ativo

SRV-WEB-01	Servidor	yes	HTTP+Disk+CPU	45.4	45.9	1
SRV-DB-01	Servidor	no	MySQL+Disk+RAM	83.3	31.7	1
SRV-APP-01	Servidor	yes	API+CPU+Mem√≥ria	38.8	54.8	0
SRV-BKP-01	Servidor	no	Backup+Disk+Net	35.3	32.6	1
SRV-FIREWALL	Servidor	yes	Firewall+IDS+IPS	30.0	37.3	0



---

üéØ Objetivo

Criar cards de disponibilidade com base nesses dados reais.
Crit√©rios:

Campo ativo:

1 = servidor online (‚úÖ)

0 = servidor offline (‚ùå)


Campo critical:

yes = mostrar destaque visual (ex: borda vermelha)


Exibir:

Nome do servidor (device_name)

Fun√ß√µes (function)

Uso de RAM e Disco

Status (Online/Offline)




---

‚úÖ C√≥digo pronto para colar no painel HTML Graphics (campo onRender)

if (!data || data.series.length === 0) {
  htmlNode.innerHTML = "<p>Sem dados.</p>";
  return;
}

// Extrair campos
const names = data.series[1].fields[1].values;
const functions = data.series[1].fields[4].values;
const ram = data.series[1].fields[8].values;
const disk = data.series[1].fields[9].values;
const ativo = data.series[1].fields[11].values;
const critical = data.series[1].fields[3].values;

let html = `
  <style>
    .card-container {
      display: flex;
      flex-wrap: wrap;
      gap: 16px;
      font-family: sans-serif;
    }
    .card {
      width: 240px;
      padding: 14px;
      border-radius: 10px;
      background-color: #f3f4f6;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      position: relative;
      border: 2px solid transparent;
      transition: all 0.3s ease;
    }
    .card.critical {
      border-color: #ef4444;
    }
    .card.offline {
      background-color: #fef2f2;
    }
    .card h3 {
      margin: 0;
      font-size: 18px;
      color: #111827;
    }
    .card p {
      margin: 4px 0;
      font-size: 14px;
    }
    .status {
      font-weight: bold;
      margin-top: 8px;
      padding: 4px 8px;
      border-radius: 6px;
      display: inline-block;
    }
    .online {
      background-color: #16a34a;
      color: white;
    }
    .offline {
      background-color: #dc2626;
      color: white;
    }
  </style>

  <div class="card-container">
`;

for (let i = 0; i < names.length; i++) {
  const name = names.get(i);
  const func = functions.get(i);
  const ramUsage = ram.get(i);
  const diskUsage = disk.get(i);
  const isOnline = ativo.get(i) === 1;
  const isCritical = critical.get(i) === 'yes';

  html += `
    <div class="card ${isCritical ? 'critical' : ''} ${!isOnline ? 'offline' : ''}">
      <h3>${name}</h3>
      <p><strong>Fun√ß√£o:</strong> ${func}</p>
      <p>RAM: ${ramUsage}% | Disco: ${diskUsage}%</p>
      <span class="status ${isOnline ? 'online' : 'offline'}">
        ${isOnline ? 'Online' : 'Offline'}
      </span>
    </div>
  `;
}

html += "</div>";
htmlNode.innerHTML = html;


---

üìå Resultado esperado:

5 cards, um por servidor.

Cart√µes com borda vermelha para servidores cr√≠ticos.

Online/Offline em verde/vermelho.

Uso de RAM e disco exibido.

Layout responsivo, leve e limpo.



---

Se quiser posso estender com:

Barras de uso de RAM/Disco animadas

Filtros por grupo

Exporta√ß√£o PDF/PNG

Vers√£o dark mode


Queres evoluir para algum desses?




Esse erro:

> ‚ùå "Cannot read properties of undefined (reading 'fields')"
indica que a posi√ß√£o data.series[1] n√£o existe ‚Äî ou seja, o √≠ndice usado est√° incorreto.




---

‚úÖ Solu√ß√£o

Vamos verificar dinamicamente o conte√∫do real da estrutura data.series e usar corretamente o √≠ndice.


---

üõ† Etapa 1: Inspecionar os dados

Adiciona este c√≥digo no campo onRender do painel HTML Graphics para ver no console do navegador:

console.log("S√©ries dispon√≠veis:", data.series);

for (let i = 0; i < data.series.length; i++) {
  console.log(`S√©rie ${i}:`, data.series[i].fields.map(f => f.name));
}

üëâ Depois:

1. Abre o painel no Grafana


2. Pressiona F12 ‚Üí aba Console


3. Ver√°s algo como:



S√©ries dispon√≠veis: [ { fields: [Array] }, ... ]
S√©rie 0: ["device_id", "device_name", "group", "critical", "function", ...]


---

‚úÖ Etapa 2: Corrigir o √≠ndice

Se data.series[0] contiver os dados certos (o que √© quase certo), basta trocar o √≠ndice 1 por 0.

üîÅ Substituir:

const names = data.series[1].fields[1].values;

‚úÖ Por:

const names = data.series[0].fields[1].values;


---

‚úÖ C√≥digo final ajustado com √≠ndice correto:

const serie = data.series[0];
const fields = serie.fields;

const names = fields.find(f => f.name === "device_name").values;
const functions = fields.find(f => f.name === "function").values;
const ram = fields.find(f => f.name === "ram_uso_percent").values;
const disk = fields.find(f => f.name === "disco_uso_percent").values;
const ativo = fields.find(f => f.name === "ativo").values;
const critical = fields.find(f => f.name === "critical").values;

let html = `
  <style>
    .card-container {
      display: flex;
      flex-wrap: wrap;
      gap: 16px;
      font-family: sans-serif;
    }
    .card {
      width: 240px;
      padding: 14px;
      border-radius: 10px;
      background-color: #f3f4f6;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      position: relative;
      border: 2px solid transparent;
      transition: all 0.3s ease;
    }
    .card.critical {
      border-color: #ef4444;
    }
    .card.offline {
      background-color: #fef2f2;
    }
    .card h3 {
      margin: 0;
      font-size: 18px;
      color: #111827;
    }
    .card p {
      margin: 4px 0;
      font-size: 14px;
    }
    .status {
      font-weight: bold;
      margin-top: 8px;
      padding: 4px 8px;
      border-radius: 6px;
      display: inline-block;
    }
    .online {
      background-color: #16a34a;
      color: white;
    }
    .offline {
      background-color: #dc2626;
      color: white;
    }
  </style>

  <div class="card-container">
`;

for (let i = 0; i < names.length; i++) {
  const name = names.get(i);
  const func = functions.get(i);
  const ramUsage = ram.get(i);
  const diskUsage = disk.get(i);
  const isOnline = ativo.get(i) === 1;
  const isCritical = critical.get(i) === 'yes';

  html += `
    <div class="card ${isCritical ? 'critical' : ''} ${!isOnline ? 'offline' : ''}">
      <h3>${name}</h3>
      <p><strong>Fun√ß√£o:</strong> ${func}</p>
      <p>RAM: ${ramUsage}% | Disco: ${diskUsage}%</p>
      <span class="status ${isOnline ? 'online' : 'offline'}">
        ${isOnline ? 'Online' : 'Offline'}
      </span>
    </div>
  `;
}

html += "</div>";
htmlNode.innerHTML = html;


---

‚úÖ Resultado

O painel agora acessa os dados corretamente

Evita erro de √≠ndice

Funciona mesmo que o Infinity reordene os campos ou adicione mais colunas



---

Se quiser, posso montar um modelo export√°vel (.json) do painel para importar direto no Grafana. Deseja isso?






Perfeito, Nidaime. Vamos corrigir duas coisas importantes no painel HTML Graphics:


---

‚úÖ 1. Problema: fundo branco dos cards

O fundo branco acontece porque usamos background-color: #f3f4f6 por padr√£o. Mas se est√°s no modo escuro (dark mode) do Grafana, esse cinza claro vira branco e perde contraste.

üîß Solu√ß√£o:

Detectar o tema e ajustar o fundo dinamicamente com base no modo:

const bgColor = theme.isDark ? "#1f2937" : "#f3f4f6";  // grafite ou cinza
const txtColor = theme.isDark ? "#f9fafb" : "#111827"; // claro ou escuro

Depois aplica no CSS do card:

background-color: ${bgColor};
color: ${txtColor};


---

‚úÖ 2. Problema: todos os servidores aparecem como Offline

Isso acontece porque ativo.get(i) provavelmente retorna uma string como "1" ou "0" e estamos comparando com n√∫mero inteiro 1.
No JavaScript, "1" === 1 retorna false.

üîß Solu√ß√£o:

Converter para inteiro:

const isOnline = parseInt(ativo.get(i)) === 1;


---

‚úÖ C√≥digo completo atualizado

> Copia este c√≥digo atualizado e substitui o anterior no campo onRender do HTML Graphics:



const serie = data.series[0];
const fields = serie.fields;

const names = fields.find(f => f.name === "device_name").values;
const functions = fields.find(f => f.name === "function").values;
const ram = fields.find(f => f.name === "ram_uso_percent").values;
const disk = fields.find(f => f.name === "disco_uso_percent").values;
const ativo = fields.find(f => f.name === "ativo").values;
const critical = fields.find(f => f.name === "critical").values;

// Definir cor de fundo conforme o tema
const bgColor = theme.isDark ? "#1f2937" : "#f3f4f6";
const txtColor = theme.isDark ? "#f9fafb" : "#111827";

let html = `
  <style>
    .card-container {
      display: flex;
      flex-wrap: wrap;
      gap: 16px;
      font-family: sans-serif;
    }
    .card {
      width: 240px;
      padding: 14px;
      border-radius: 10px;
      background-color: ${bgColor};
      color: ${txtColor};
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      position: relative;
      border: 2px solid transparent;
      transition: all 0.3s ease;
    }
    .card.critical {
      border-color: #ef4444;
    }
    .card.offline {
      background-color: #7f1d1d; /* vermelho escuro para offline */
    }
    .card h3 {
      margin: 0;
      font-size: 18px;
    }
    .card p {
      margin: 4px 0;
      font-size: 14px;
    }
    .status {
      font-weight: bold;
      margin-top: 8px;
      padding: 4px 8px;
      border-radius: 6px;
      display: inline-block;
    }
    .online {
      background-color: #16a34a;
      color: white;
    }
    .offline {
      background-color: #dc2626;
      color: white;
    }
  </style>

  <div class="card-container">
`;

for (let i = 0; i < names.length; i++) {
  const name = names.get(i);
  const func = functions.get(i);
  const ramUsage = ram.get(i);
  const diskUsage = disk.get(i);
  const isOnline = parseInt(ativo.get(i)) === 1;
  const isCritical = critical.get(i).toLowerCase() === 'yes';

  html += `
    <div class="card ${isCritical ? 'critical' : ''} ${!isOnline ? 'offline' : ''}">
      <h3>${name}</h3>
      <p><strong>Fun√ß√£o:</strong> ${func}</p>
      <p>RAM: ${ramUsage}% | Disco: ${diskUsage}%</p>
      <span class="status ${isOnline ? 'online' : 'offline'}">
        ${isOnline ? 'Online' : 'Offline'}
      </span>
    </div>
  `;
}

html += "</div>";
htmlNode.innerHTML = html;


---

üß™ Resultado agora

Cards com fundo escuro/claro adaptados ao tema do Grafana

Status correto (online/offline)

Cr√≠ticos destacados com borda vermelha

Visual limpo e profissional



---

Se quiser posso adicionar:

üîã Indicadores com barra de RAM/Disco

üìä Gr√°fico SVG de performance

üõéÔ∏è Anima√ß√µes para servidores cr√≠ticos


Deseja algum desses recursos?





Claro. Abaixo est√° o c√≥digo HTML Graphics ajustado para um √∫nico dispositivo, simulando como se voc√™ j√° estivesse recebendo os valores diretamente, por exemplo via query √∫nica (Infinity com filtro ou JSON direto).


---

‚úÖ Cen√°rio simulado

Voc√™ tem os dados j√° prontos para um √∫nico servidor:

const name = "SRV-WEB-01";
const func = "HTTP+Disk+CPU";
const ramUsage = 45.4;
const diskUsage = 45.9;
const isOnline = true;
const isCritical = true;


---

‚úÖ C√≥digo completo para painel HTML Graphics (sem usar data.series)

// Dados simulados de um √∫nico dispositivo
const name = "SRV-WEB-01";
const func = "HTTP+Disk+CPU";
const ramUsage = 45.4;
const diskUsage = 45.9;
const isOnline = true;
const isCritical = true;

// Cores com base no tema
const bgColor = theme.isDark ? "#1f2937" : "#f3f4f6";
const txtColor = theme.isDark ? "#f9fafb" : "#111827";

let html = `
  <style>
    .card {
      width: 260px;
      padding: 16px;
      border-radius: 10px;
      background-color: ${bgColor};
      color: ${txtColor};
      box-shadow: 0 2px 6px rgba(0,0,0,0.15);
      border: 2px solid ${isCritical ? '#ef4444' : 'transparent'};
      transition: all 0.3s ease;
      font-family: sans-serif;
    }
    .card.offline {
      background-color: #7f1d1d;
      color: white;
    }
    .card h3 {
      margin: 0;
      font-size: 20px;
    }
    .card p {
      margin: 6px 0;
      font-size: 15px;
    }
    .status {
      font-weight: bold;
      margin-top: 10px;
      padding: 5px 10px;
      border-radius: 6px;
      display: inline-block;
    }
    .online {
      background-color: #16a34a;
      color: white;
    }
    .offline {
      background-color: #dc2626;
      color: white;
    }
  </style>

  <div class="card ${!isOnline ? 'offline' : ''}">
    <h3>${name}</h3>
    <p><strong>Fun√ß√£o:</strong> ${func}</p>
    <p>RAM: ${ramUsage}% | Disco: ${diskUsage}%</p>
    <span class="status ${isOnline ? 'online' : 'offline'}">
      ${isOnline ? 'Online' : 'Offline'}
    </span>
  </div>
`;

htmlNode.innerHTML = html;


---

üß™ Resultado

Um √∫nico card elegante

Se isCritical = true, ter√° borda vermelha

Se isOnline = false, fundo vermelho escuro e texto branco

Adaptado ao modo claro ou escuro do Grafana



---

Se quiser, posso transformar isso em um componente reutiliz√°vel com base em vari√°veis de painel (Grafana templating), ou gerar varia√ß√µes autom√°ticas por grupo, por status ou por fun√ß√£o.

Deseja um pr√≥ximo passo com isso din√¢mico ou ainda est√° testando visualmente?





Perfeito, agora entendido: voc√™ quer exibir apenas um dispositivo por painel, e os dados devem ser extra√≠dos de data.series[0] ‚Äî diretamente do Infinity (CSV ou JSON), com os seguintes campos:

device_name: string

function: string

ram_uso_percent: n√∫mero

disco_uso_percent: n√∫mero

ativo: 1 ou 0 (como string ou n√∫mero)

critical: "yes" ou "no"



---

‚úÖ C√≥digo HTML Graphics para um √∫nico dispositivo vindo do data

> Cola este c√≥digo no campo onRender, funcionando 100% com tua estrutura de dados:



if (!data || data.series.length === 0) {
  htmlNode.innerHTML = "<p>Sem dados dispon√≠veis</p>";
  return;
}

const fields = data.series[0].fields;

// Acessa os valores diretamente
const name = fields.find(f => f.name === "device_name").values.get(0);
const func = fields.find(f => f.name === "function").values.get(0);
const ramUsage = fields.find(f => f.name === "ram_uso_percent").values.get(0);
const diskUsage = fields.find(f => f.name === "disco_uso_percent").values.get(0);
const ativo = fields.find(f => f.name === "ativo").values.get(0);
const critical = fields.find(f => f.name === "critical").values.get(0);

const isOnline = parseInt(ativo) === 1;
const isCritical = (critical + "").toLowerCase() === "yes";

// Ajuste de cores conforme tema
const bgColor = theme.isDark ? "#1f2937" : "#f3f4f6";
const txtColor = theme.isDark ? "#f9fafb" : "#111827";

let html = `
  <style>
    .card {
      width: 260px;
      padding: 16px;
      border-radius: 10px;
      background-color: ${isOnline ? bgColor : '#7f1d1d'};
      color: ${isOnline ? txtColor : '#fff'};
      box-shadow: 0 2px 6px rgba(0,0,0,0.15);
      border: 2px solid ${isCritical ? '#ef4444' : 'transparent'};
      transition: all 0.3s ease;
      font-family: sans-serif;
    }
    .card h3 {
      margin: 0;
      font-size: 20px;
    }
    .card p {
      margin: 6px 0;
      font-size: 15px;
    }
    .status {
      font-weight: bold;
      margin-top: 10px;
      padding: 5px 10px;
      border-radius: 6px;
      display: inline-block;
    }
    .online {
      background-color: #16a34a;
      color: white;
    }
    .offline {
      background-color: #dc2626;
      color: white;
    }
  </style>

  <div class="card">
    <h3>${name}</h3>
    <p><strong>Fun√ß√£o:</strong> ${func}</p>
    <p>RAM: ${ramUsage}% | Disco: ${diskUsage}%</p>
    <span class="status ${isOnline ? 'online' : 'offline'}">
      ${isOnline ? 'Online' : 'Offline'}
    </span>
  </div>
`;

htmlNode.innerHTML = html;


---

‚úÖ Resultado

Extrai o primeiro (√∫nico) valor do data.series[0]

Corrige compara√ß√£o de tipos (ativo como n√∫mero, critical como string)

Aplica borda vermelha se cr√≠tico, fundo vermelho se offline

Compat√≠vel com dark/light mode



---

Se quiser, posso fazer:

Um painel que exibe v√°rios dispositivos dinamicamente

Um componente reutiliz√°vel com vari√°vel de dispositivo ($device)

Uma vers√£o com gauge embutido ou anima√ß√µes


Deseja seguir com algo desses?





Excelente escolha. Vamos criar um card com gauge embutido (RAM e Disco) e anima√ß√£o suave usando apenas HTML, CSS e JavaScript ‚Äî sem bibliotecas externas. Isso funcionar√° diretamente no plugin HTML Graphics do Grafana com dados vindos de data.series[0].


---

üéØ Recursos deste painel:

Gauge semicircular para RAM e Disco (%)

Anima√ß√£o de preenchimento

Borda vermelha se cr√≠tico

Fundo escuro se offline

Compat√≠vel com dark/light mode do Grafana



---

‚úÖ C√≥digo completo para o campo onRender

> Cola este c√≥digo inteiro no painel do plugin HTML Graphics:



if (!data || data.series.length === 0) {
  htmlNode.innerHTML = "<p>Sem dados dispon√≠veis</p>";
  return;
}

// === Obter valores do primeiro dispositivo ===
const fields = data.series[0].fields;

const name = fields.find(f => f.name === "device_name").values.get(0);
const func = fields.find(f => f.name === "function").values.get(0);
const ramUsage = parseFloat(fields.find(f => f.name === "ram_uso_percent").values.get(0));
const diskUsage = parseFloat(fields.find(f => f.name === "disco_uso_percent").values.get(0));
const ativo = fields.find(f => f.name === "ativo").values.get(0);
const critical = fields.find(f => f.name === "critical").values.get(0);

const isOnline = parseInt(ativo) === 1;
const isCritical = (critical + "").toLowerCase() === "yes";

// === Tema do Grafana ===
const bgColor = theme.isDark ? "#1f2937" : "#f3f4f6";
const txtColor = theme.isDark ? "#f9fafb" : "#111827";

htmlNode.innerHTML = `
  <style>
    .card {
      width: 300px;
      padding: 16px;
      border-radius: 12px;
      background-color: ${isOnline ? bgColor : "#7f1d1d"};
      color: ${isOnline ? txtColor : "white"};
      box-shadow: 0 4px 10px rgba(0,0,0,0.1);
      border: 2px solid ${isCritical ? "#ef4444" : "transparent"};
      font-family: sans-serif;
      transition: all 0.3s ease;
    }
    .card h3 {
      margin: 0 0 4px 0;
      font-size: 20px;
    }
    .card p {
      margin: 4px 0;
      font-size: 14px;
    }
    .status {
      margin-top: 10px;
      display: inline-block;
      padding: 4px 10px;
      border-radius: 6px;
      font-weight: bold;
      background-color: ${isOnline ? "#16a34a" : "#dc2626"};
      color: white;
    }
    .gauge-container {
      margin-top: 14px;
      display: flex;
      justify-content: space-between;
    }
    .gauge {
      width: 120px;
      height: 60px;
      position: relative;
    }
    .gauge svg {
      width: 100%;
      height: 100%;
      transform: rotate(-90deg);
    }
    .gauge circle {
      fill: none;
      stroke-width: 10;
      stroke-linecap: round;
    }
    .gauge .bg {
      stroke: #e5e7eb;
    }
    .gauge .fg {
      stroke: #3b82f6;
      stroke-dasharray: 157;
      stroke-dashoffset: 157;
      transition: stroke-dashoffset 1.5s ease;
    }
    .gauge-label {
      position: absolute;
      bottom: -8px;
      width: 100%;
      text-align: center;
      font-size: 12px;
    }
  </style>

  <div class="card">
    <h3>${name}</h3>
    <p><strong>Fun√ß√£o:</strong> ${func}</p>
    <div class="status">${isOnline ? "Online" : "Offline"}</div>

    <div class="gauge-container">
      <div class="gauge" id="ramGauge">
        <svg>
          <circle class="bg" cx="60" cy="60" r="25"></circle>
          <circle class="fg" cx="60" cy="60" r="25"></circle>
        </svg>
        <div class="gauge-label">RAM ${ramUsage}%</div>
      </div>

      <div class="gauge" id="diskGauge">
        <svg>
          <circle class="bg" cx="60" cy="60" r="25"></circle>
          <circle class="fg" cx="60" cy="60" r="25"></circle>
        </svg>
        <div class="gauge-label">Disco ${diskUsage}%</div>
      </div>
    </div>
  </div>
`;

// === Anima√ß√£o dos gauges ===
const animateGauge = (selector, percent) => {
  const circle = htmlNode.querySelector(selector);
  const radius = 25;
  const circumference = 2 * Math.PI * radius;
  const offset = circumference * (1 - percent / 100);
  circle.style.strokeDashoffset = offset;
};

animateGauge("#ramGauge .fg", ramUsage);
animateGauge("#diskGauge .fg", diskUsage);


---

‚úÖ Visual final:

Um card √∫nico com:

Nome, fun√ß√£o e status (Online/Offline)

Dois gauges animados de RAM e Disco (%)

Borda vermelha se cr√≠tico

Compat√≠vel com dark/light mode




---

üöÄ Extens√µes poss√≠veis

Adicionar indicadores de CPU, alertas sonoros/visuais

Painel din√¢mico com vari√°vel $device ou m√∫ltiplos dispositivos

Exporta√ß√£o para imagem/PDF via Grafana


Queres que eu crie agora a vers√£o com vari√°vel de dispositivo para reutilizar o painel por nome?





Aqui est√£o diferentes tipos de gr√°ficos feitos apenas com JavaScript puro (Vanilla JS), sem bibliotecas externas como Chart.js ou D3.js. Todos os exemplos usam apenas HTML, CSS e JS.


---

üìä 1. Gr√°fico de Barras (Bar Chart)

<!DOCTYPE html>
<html lang="pt">
<head>
  <meta charset="UTF-8" />
  <style>
    .bar-chart {
      display: flex;
      align-items: flex-end;
      height: 200px;
      width: 400px;
      gap: 10px;
      border-left: 1px solid #000;
      border-bottom: 1px solid #000;
      padding: 10px;
    }
    .bar {
      width: 30px;
      background: steelblue;
      text-align: center;
      color: white;
    }
  </style>
</head>
<body>
  <div class="bar-chart" id="barChart"></div>

  <script>
    const data = [40, 80, 60, 100, 30];
    const chart = document.getElementById("barChart");

    data.forEach(value => {
      const bar = document.createElement("div");
      bar.className = "bar";
      bar.style.height = `${value * 2}px`;
      bar.textContent = value;
      chart.appendChild(bar);
    });
  </script>
</body>
</html>


---

üìà 2. Gr√°fico de Linhas (Line Chart)

<canvas id="lineChart" width="400" height="200"></canvas>
<script>
  const canvas = document.getElementById('lineChart');
  const ctx = canvas.getContext('2d');

  const data = [10, 50, 30, 70, 90];
  const stepX = 80;
  const baseY = 180;

  ctx.beginPath();
  ctx.moveTo(0, baseY - data[0]);

  data.forEach((val, i) => {
    ctx.lineTo(i * stepX, baseY - val);
  });

  ctx.strokeStyle = 'green';
  ctx.lineWidth = 2;
  ctx.stroke();

  // Pontos
  data.forEach((val, i) => {
    ctx.beginPath();
    ctx.arc(i * stepX, baseY - val, 4, 0, 2 * Math.PI);
    ctx.fillStyle = 'blue';
    ctx.fill();
  });
</script>


---

üç© 3. Gr√°fico de Pizza (Pie Chart)

<canvas id="pieChart" width="200" height="200"></canvas>
<script>
  const canvas = document.getElementById('pieChart');
  const ctx = canvas.getContext('2d');

  const data = [30, 70, 45, 55];
  const colors = ['red', 'blue', 'green', 'orange'];

  const total = data.reduce((a, b) => a + b, 0);
  let start = 0;

  data.forEach((value, i) => {
    const angle = (value / total) * 2 * Math.PI;
    ctx.beginPath();
    ctx.moveTo(100, 100);
    ctx.arc(100, 100, 100, start, start + angle);
    ctx.closePath();
    ctx.fillStyle = colors[i];
    ctx.fill();
    start += angle;
  });
</script>


---

üìâ 4. Gr√°fico de √Årea (Area Chart)

<canvas id="areaChart" width="400" height="200"></canvas>
<script>
  const canvas = document.getElementById('areaChart');
  const ctx = canvas.getContext('2d');
  const data = [10, 60, 40, 80, 50];
  const stepX = 80;
  const baseY = 180;

  ctx.beginPath();
  ctx.moveTo(0, baseY);

  data.forEach((val, i) => {
    ctx.lineTo(i * stepX, baseY - val);
  });

  ctx.lineTo((data.length - 1) * stepX, baseY);
  ctx.closePath();

  ctx.fillStyle = 'rgba(0, 150, 255, 0.4)';
  ctx.fill();

  ctx.strokeStyle = 'blue';
  ctx.stroke();
</script>


---

üì¶ 5. Gr√°fico de Colunas com Cores Aleat√≥rias

<div style="display:flex;align-items:end;height:200px;" id="columns"></div>
<script>
  const data = [25, 45, 60, 90, 50];
  const container = document.getElementById('columns');

  data.forEach(val => {
    const col = document.createElement('div');
    col.style.height = val * 2 + 'px';
    col.style.width = '40px';
    col.style.margin = '0 5px';
    col.style.backgroundColor = '#' + Math.floor(Math.random()*16777215).toString(16);
    container.appendChild(col);
  });
</script>


---

Se quiser, posso montar um painel interativo com sele√ß√£o de tipo de gr√°fico ou transformar esses gr√°ficos em componentes JS reutiliz√°veis. Deseja isso?






Perfeito. Aqui est√£o mais tipos de gr√°ficos feitos exclusivamente com JavaScript puro, HTML e CSS. Continuamos sem bibliotecas externas.


---

üìç 6. Gr√°fico de Dispers√£o (Scatter Plot)

<canvas id="scatterPlot" width="400" height="300"></canvas>
<script>
  const canvas = document.getElementById('scatterPlot');
  const ctx = canvas.getContext('2d');
  const points = [
    {x: 20, y: 80}, {x: 50, y: 200},
    {x: 120, y: 100}, {x: 180, y: 50},
    {x: 300, y: 220}
  ];

  ctx.fillStyle = 'black';
  points.forEach(p => {
    ctx.beginPath();
    ctx.arc(p.x, p.y, 5, 0, Math.PI * 2);
    ctx.fill();
  });
</script>


---

üìä 7. Gr√°fico de Barras Horizontais

<div id="horizontalBarChart"></div>
<script>
  const data = [60, 30, 90, 45];
  const container = document.getElementById('horizontalBarChart');

  data.forEach(val => {
    const bar = document.createElement('div');
    bar.style.width = val * 2 + 'px';
    bar.style.height = '30px';
    bar.style.margin = '5px 0';
    bar.style.background = 'teal';
    bar.style.color = 'white';
    bar.textContent = val;
    bar.style.paddingLeft = '10px';
    container.appendChild(bar);
  });
</script>


---

üéØ 8. Gr√°fico de Radar (Fake Radar com Canvas)

<canvas id="radarChart" width="300" height="300"></canvas>
<script>
  const canvas = document.getElementById('radarChart');
  const ctx = canvas.getContext('2d');

  const centerX = 150, centerY = 150, radius = 100;
  const data = [80, 60, 70, 90, 50];
  const max = 100;
  const total = data.length;

  ctx.beginPath();
  for (let i = 0; i < total; i++) {
    const angle = (2 * Math.PI / total) * i;
    const r = (data[i] / max) * radius;
    const x = centerX + r * Math.cos(angle);
    const y = centerY + r * Math.sin(angle);
    if (i === 0) ctx.moveTo(x, y);
    else ctx.lineTo(x, y);
  }
  ctx.closePath();
  ctx.strokeStyle = 'blue';
  ctx.fillStyle = 'rgba(0,0,255,0.2)';
  ctx.fill();
  ctx.stroke();
</script>


---

üìÖ 9. Gr√°fico de Calend√°rio de Atividades (tipo GitHub)

<div style="display: grid; grid-template-columns: repeat(7, 15px); gap: 2px;" id="calendarHeatmap"></div>
<script>
  const container = document.getElementById('calendarHeatmap');

  for (let i = 0; i < 7 * 12; i++) {
    const val = Math.floor(Math.random() * 4);
    const colors = ['#ebedf0', '#c6e48b', '#7bc96f', '#196127'];
    const cell = document.createElement('div');
    cell.style.width = '15px';
    cell.style.height = '15px';
    cell.style.backgroundColor = colors[val];
    container.appendChild(cell);
  }
</script>


---

‚ö° 10. Gauge / Veloc√≠metro

<canvas id="gauge" width="200" height="100"></canvas>
<script>
  const canvas = document.getElementById('gauge');
  const ctx = canvas.getContext('2d');
  const value = 70; // 0 a 100

  ctx.beginPath();
  ctx.arc(100, 100, 80, Math.PI, 0);
  ctx.strokeStyle = '#ddd';
  ctx.lineWidth = 20;
  ctx.stroke();

  const endAngle = Math.PI + (Math.PI * (value / 100));
  ctx.beginPath();
  ctx.arc(100, 100, 80, Math.PI, endAngle);
  ctx.strokeStyle = 'green';
  ctx.lineWidth = 20;
  ctx.stroke();

  ctx.fillStyle = 'black';
  ctx.font = '20px Arial';
  ctx.fillText(value + '%', 80, 60);
</script>


---

‚öôÔ∏è 11. Gr√°fico de Progresso Circular

<canvas id="progressCircle" width="150" height="150"></canvas>
<script>
  const canvas = document.getElementById('progressCircle');
  const ctx = canvas.getContext('2d');
  const value = 75;

  ctx.beginPath();
  ctx.arc(75, 75, 60, 0, 2 * Math.PI);
  ctx.strokeStyle = '#ddd';
  ctx.lineWidth = 10;
  ctx.stroke();

  ctx.beginPath();
  ctx.arc(75, 75, 60, -0.5 * Math.PI, ((value / 100) * 2 * Math.PI) - 0.5 * Math.PI);
  ctx.strokeStyle = 'purple';
  ctx.lineWidth = 10;
  ctx.stroke();

  ctx.fillStyle = 'black';
  ctx.font = '18px sans-serif';
  ctx.fillText(value + '%', 45, 80);
</script>


---

Deseja agora?

Criar uma interface com bot√µes para alternar entre os gr√°ficos?

Transformar tudo num m√≥dulo JS reutiliz√°vel?

Integrar com dados din√¢micos via AJAX ou WebSocket?


Posso montar um painel completo interativo, pronto para produ√ß√£o. Deseja seguir por esse caminho?





Aqui est√£o mais exemplos de gr√°ficos avan√ßados e criativos feitos apenas com JavaScript puro, HTML e CSS ‚Äî sem bibliotecas externas.


---

üå°Ô∏è 12. Gr√°fico de Term√¥metro (Indicador de Temperatura ou Progresso)

<div id="thermo" style="width: 50px; height: 200px; border: 2px solid #000; position: relative; background: #eee;">
  <div id="fill" style="position: absolute; bottom: 0; width: 100%; background: red;"></div>
</div>
<script>
  const value = 70; // de 0 a 100
  document.getElementById('fill').style.height = value * 2 + 'px';
</script>


---

üß≠ 13. Gr√°fico de Veloc√≠metro com Ponteiro (Gauge com Needle)

<canvas id="needleGauge" width="200" height="120"></canvas>
<script>
  const canvas = document.getElementById('needleGauge');
  const ctx = canvas.getContext('2d');
  const value = 60; // de 0 a 100

  // base
  ctx.beginPath();
  ctx.arc(100, 100, 80, Math.PI, 0);
  ctx.strokeStyle = '#999';
  ctx.lineWidth = 15;
  ctx.stroke();

  // ponteiro
  const angle = Math.PI * (1 - value / 100);
  const x = 100 + 70 * Math.cos(angle);
  const y = 100 - 70 * Math.sin(angle);
  ctx.beginPath();
  ctx.moveTo(100, 100);
  ctx.lineTo(x, y);
  ctx.strokeStyle = 'red';
  ctx.lineWidth = 4;
  ctx.stroke();

  // centro
  ctx.beginPath();
  ctx.arc(100, 100, 5, 0, 2 * Math.PI);
  ctx.fillStyle = 'black';
  ctx.fill();
</script>


---

üß± 14. Gr√°fico de Cascata (Waterfall Chart simplificado)

<div id="waterfall" style="display: flex; align-items: flex-end; gap: 5px; height: 200px;"></div>
<script>
  const data = [100, -40, 60, -30, 50];
  const container = document.getElementById('waterfall');
  let current = 0;

  data.forEach(val => {
    const bar = document.createElement('div');
    bar.style.width = '30px';
    bar.style.height = Math.abs(val) * 2 + 'px';
    bar.style.marginTop = (val < 0 ? (current + val) * 2 : current * 2) + 'px';
    bar.style.background = val >= 0 ? 'green' : 'red';
    container.appendChild(bar);
    current += val;
  });
</script>


---

üåê 15. Gr√°fico de Radar Circular Interativo (com mouse)

<canvas id="radarInteractive" width="300" height="300" style="border:1px solid #ccc;"></canvas>
<script>
  const canvas = document.getElementById('radarInteractive');
  const ctx = canvas.getContext('2d');
  const center = { x: 150, y: 150 };
  const radius = 100;
  const points = [80, 60, 40, 90, 50];
  const labels = ['For√ßa', 'Velocidade', 'Resist√™ncia', 'Agilidade', 'Foco'];

  function drawRadar() {
    ctx.clearRect(0, 0, 300, 300);
    const total = points.length;
    ctx.beginPath();
    for (let i = 0; i < total; i++) {
      const angle = (Math.PI * 2 / total) * i - Math.PI / 2;
      const x = center.x + (points[i] / 100) * radius * Math.cos(angle);
      const y = center.y + (points[i] / 100) * radius * Math.sin(angle);
      if (i === 0) ctx.moveTo(x, y);
      else ctx.lineTo(x, y);
    }
    ctx.closePath();
    ctx.strokeStyle = '#333';
    ctx.stroke();
    ctx.fillStyle = 'rgba(0,0,255,0.2)';
    ctx.fill();

    // desenhar eixo e labels
    labels.forEach((label, i) => {
      const angle = (Math.PI * 2 / total) * i - Math.PI / 2;
      const x = center.x + (radius + 10) * Math.cos(angle);
      const y = center.y + (radius + 10) * Math.sin(angle);
      ctx.fillStyle = '#000';
      ctx.font = '12px sans-serif';
      ctx.fillText(label, x - 20, y);
    });
  }

  drawRadar();
</script>


---

üßÆ 16. Gr√°fico de Funil (Funnel Chart simplificado)

<div id="funnelChart" style="width: 300px;"></div>
<script>
  const data = [100, 80, 50, 30];
  const funnel = document.getElementById('funnelChart');

  data.forEach((val, i) => {
    const bar = document.createElement('div');
    bar.style.height = '30px';
    bar.style.width = val * 2 + 'px';
    bar.style.margin = '0 auto 10px';
    bar.style.background = '#3498db';
    bar.textContent = `${val}`;
    bar.style.color = '#fff';
    bar.style.textAlign = 'center';
    funnel.appendChild(bar);
  });
</script>


---

üì° 17. Gr√°fico de Pulsa√ß√£o/ECG (Simula√ß√£o com Canvas)

<canvas id="pulseChart" width="400" height="100"></canvas>
<script>
  const canvas = document.getElementById('pulseChart');
  const ctx = canvas.getContext('2d');

  function drawPulse() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.beginPath();
    ctx.moveTo(0, 50);
    for (let x = 0; x <= 400; x++) {
      const y = 50 + Math.sin(x * 0.1) * 20;
      ctx.lineTo(x, y);
    }
    ctx.strokeStyle = 'red';
    ctx.lineWidth = 2;
    ctx.stroke();
  }

  setInterval(drawPulse, 500);
</script>


---

‚úÖ Pronto para uso real

Se quiser, posso:

Gerar todos os exemplos como um painel interativo com bot√£o para alternar os gr√°ficos.

Criar um componente modular JS que aceite dados e tipo de gr√°fico.

Adicionar exporta√ß√£o para imagem ou integra√ß√£o com dados reais via API ou banco de dados.


Deseja seguir para alguma dessas implementa√ß√µes?






Aqui est√£o mais exemplos de gr√°ficos avan√ßados e criativos feitos apenas com JavaScript puro, HTML e CSS ‚Äî sem bibliotecas externas.


---

üå°Ô∏è 12. Gr√°fico de Term√¥metro (Indicador de Temperatura ou Progresso)

<div id="thermo" style="width: 50px; height: 200px; border: 2px solid #000; position: relative; background: #eee;">
  <div id="fill" style="position: absolute; bottom: 0; width: 100%; background: red;"></div>
</div>
<script>
  const value = 70; // de 0 a 100
  document.getElementById('fill').style.height = value * 2 + 'px';
</script>


---

üß≠ 13. Gr√°fico de Veloc√≠metro com Ponteiro (Gauge com Needle)

<canvas id="needleGauge" width="200" height="120"></canvas>
<script>
  const canvas = document.getElementById('needleGauge');
  const ctx = canvas.getContext('2d');
  const value = 60; // de 0 a 100

  // base
  ctx.beginPath();
  ctx.arc(100, 100, 80, Math.PI, 0);
  ctx.strokeStyle = '#999';
  ctx.lineWidth = 15;
  ctx.stroke();

  // ponteiro
  const angle = Math.PI * (1 - value / 100);
  const x = 100 + 70 * Math.cos(angle);
  const y = 100 - 70 * Math.sin(angle);
  ctx.beginPath();
  ctx.moveTo(100, 100);
  ctx.lineTo(x, y);
  ctx.strokeStyle = 'red';
  ctx.lineWidth = 4;
  ctx.stroke();

  // centro
  ctx.beginPath();
  ctx.arc(100, 100, 5, 0, 2 * Math.PI);
  ctx.fillStyle = 'black';
  ctx.fill();
</script>


---

üß± 14. Gr√°fico de Cascata (Waterfall Chart simplificado)

<div id="waterfall" style="display: flex; align-items: flex-end; gap: 5px; height: 200px;"></div>
<script>
  const data = [100, -40, 60, -30, 50];
  const container = document.getElementById('waterfall');
  let current = 0;

  data.forEach(val => {
    const bar = document.createElement('div');
    bar.style.width = '30px';
    bar.style.height = Math.abs(val) * 2 + 'px';
    bar.style.marginTop = (val < 0 ? (current + val) * 2 : current * 2) + 'px';
    bar.style.background = val >= 0 ? 'green' : 'red';
    container.appendChild(bar);
    current += val;
  });
</script>


---

üåê 15. Gr√°fico de Radar Circular Interativo (com mouse)

<canvas id="radarInteractive" width="300" height="300" style="border:1px solid #ccc;"></canvas>
<script>
  const canvas = document.getElementById('radarInteractive');
  const ctx = canvas.getContext('2d');
  const center = { x: 150, y: 150 };
  const radius = 100;
  const points = [80, 60, 40, 90, 50];
  const labels = ['For√ßa', 'Velocidade', 'Resist√™ncia', 'Agilidade', 'Foco'];

  function drawRadar() {
    ctx.clearRect(0, 0, 300, 300);
    const total = points.length;
    ctx.beginPath();
    for (let i = 0; i < total; i++) {
      const angle = (Math.PI * 2 / total) * i - Math.PI / 2;
      const x = center.x + (points[i] / 100) * radius * Math.cos(angle);
      const y = center.y + (points[i] / 100) * radius * Math.sin(angle);
      if (i === 0) ctx.moveTo(x, y);
      else ctx.lineTo(x, y);
    }
    ctx.closePath();
    ctx.strokeStyle = '#333';
    ctx.stroke();
    ctx.fillStyle = 'rgba(0,0,255,0.2)';
    ctx.fill();

    // desenhar eixo e labels
    labels.forEach((label, i) => {
      const angle = (Math.PI * 2 / total) * i - Math.PI / 2;
      const x = center.x + (radius + 10) * Math.cos(angle);
      const y = center.y + (radius + 10) * Math.sin(angle);
      ctx.fillStyle = '#000';
      ctx.font = '12px sans-serif';
      ctx.fillText(label, x - 20, y);
    });
  }

  drawRadar();
</script>


---

üßÆ 16. Gr√°fico de Funil (Funnel Chart simplificado)

<div id="funnelChart" style="width: 300px;"></div>
<script>
  const data = [100, 80, 50, 30];
  const funnel = document.getElementById('funnelChart');

  data.forEach((val, i) => {
    const bar = document.createElement('div');
    bar.style.height = '30px';
    bar.style.width = val * 2 + 'px';
    bar.style.margin = '0 auto 10px';
    bar.style.background = '#3498db';
    bar.textContent = `${val}`;
    bar.style.color = '#fff';
    bar.style.textAlign = 'center';
    funnel.appendChild(bar);
  });
</script>


---

üì° 17. Gr√°fico de Pulsa√ß√£o/ECG (Simula√ß√£o com Canvas)

<canvas id="pulseChart" width="400" height="100"></canvas>
<script>
  const canvas = document.getElementById('pulseChart');
  const ctx = canvas.getContext('2d');

  function drawPulse() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.beginPath();
    ctx.moveTo(0, 50);
    for (let x = 0; x <= 400; x++) {
      const y = 50 + Math.sin(x * 0.1) * 20;
      ctx.lineTo(x, y);
    }
    ctx.strokeStyle = 'red';
    ctx.lineWidth = 2;
    ctx.stroke();
  }

  setInterval(drawPulse, 500);
</script>


---

‚úÖ Pronto para uso real

Se quiser, posso:

Gerar todos os exemplos como um painel interativo com bot√£o para alternar os gr√°ficos.

Criar um componente modular JS que aceite dados e tipo de gr√°fico.

Adicionar exporta√ß√£o para imagem ou integra√ß√£o com dados reais via API ou banco de dados.


Deseja seguir para alguma dessas implementa√ß√µes?

