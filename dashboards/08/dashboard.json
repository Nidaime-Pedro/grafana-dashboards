{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "description": "Oitavo modelo de testes",
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 40,
  "links": [],
  "panels": [
    {
      "datasource": {
        "type": "datasource",
        "uid": "-- Dashboard --"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 13,
        "x": 0,
        "y": 0
      },
      "id": 2,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "* {\n  font-family: Open Sans;\n}\n\n.box {\n  border: solid #555 2px;\n  border-radius: 10px;\n  padding: 10px 20px;\n}\n",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "<h1>Monitoramento de Servidores</h1>",
        "onInit": "// Sets the text from customProperties\nconst htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\n\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = customProperties.text;\n\n  // Change the text color based on the theme\n  if (theme.isDark) {\n    htmlgraphicsText.style.color = 'green';\n  } else {\n    htmlgraphicsText.style.color = 'red';\n  }\n}\n",
        "onInitOnResize": false,
        "onRender": "// Sets the value from the first series on every refresh\nconst htmlgraphicsValue = htmlNode.getElementById('htmlgraphics-value');\n\nif (htmlgraphicsValue) {\n  const valueField = data.series[0]?.fields[1];\n  if (valueField) {\n    const length = valueField.values.length;\n    htmlgraphicsValue.textContent = valueField.values.get(length - 1);\n  } else {\n    htmlgraphicsValue.textContent = \"No data\"\n  }\n}\n",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "#:r2b6:{\r\n  border: 1px white solid;\r\n}",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.1.1",
      "targets": [
        {
          "datasource": {
            "type": "datasource",
            "uid": "-- Dashboard --"
          },
          "refId": "A"
        }
      ],
      "title": "",
      "transparent": true,
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "yesoreyeram-infinity-datasource",
        "uid": "deonfk7bniby8b"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 5,
        "x": 18,
        "y": 0
      },
      "id": 7,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "\n",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "",
        "onInit": "// Sets the text from customProperties\nconst htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\n\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = customProperties.text;\n\n  // Change the text color based on the theme\n  if (theme.isDark) {\n    htmlgraphicsText.style.color = 'green';\n  } else {\n    htmlgraphicsText.style.color = 'red';\n  }\n}\n",
        "onInitOnResize": false,
        "onRender": "if (!data || data.series.length === 0) {\n  htmlNode.innerHTML = \"<p>Sem dados.</p>\";\n  return;\n}\n\nlet ativos = 0;\nlet inativos = 0;\n\nconst ativo = data.series[0].fields[0].values;\n\nfor (let i = 0; i < ativo.length; i++) {\n  if (ativo[i] == 1) {\n    ativos++;\n  } else if (ativo[i] == 0) {\n    inativos++;\n  }\n}\n\nlet html = `\n  <style>\n    .card-container {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 16px;\n      font-family: sans-serif;\n    }\n    .card {\n      width: 240px;\n      padding: 14px;\n      border-radius: 10px;\n      box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n      position: relative;\n      border: 2px solid transparent;\n      transition: all 0.3s ease;\n    }\n    .card h3 {\n      margin: 0;\n      font-size: 18px;\n      color: #111827;\n    }\n  </style>\n\n  <div class=\"card-container\">\n    <div class=\"card\">\n      <h3>ATIVOS</h3>\n      <h1 style=\"color: green;\">${ativos} / ${ativo.length}</h1>\n    </div>\n  </div>\n`;\n\nhtmlNode.innerHTML = html;\n",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.1.1",
      "targets": [
        {
          "columns": [],
          "data": "device_id,device_name,group,critical,function,pico_rede_mbps,temperatura_c,tempo_uso_horas,ram_uso_percent,disco_uso_percent,timestamp\n1,SRV-WEB-01,Servidor,yes,HTTP+Disk+CPU,950,72,162,45.4,45.9,2025-06-01\n",
          "datasource": {
            "type": "yesoreyeram-infinity-datasource",
            "uid": "deonfk7bniby8b"
          },
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "parser": "backend",
          "refId": "A",
          "root_selector": "",
          "source": "url",
          "type": "csv",
          "url": "http://localhost:8000/grupo_servidor.csv",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        }
      ],
      "title": "",
      "transparent": true,
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "yesoreyeram-infinity-datasource",
        "uid": "deonfk7bniby8b"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 24,
        "x": 0,
        "y": 5
      },
      "id": 17,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "\n",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "",
        "onInit": "// Sets the text from customProperties\nconst htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\n\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = customProperties.text;\n\n  // Change the text color based on the theme\n  if (theme.isDark) {\n    htmlgraphicsText.style.color = 'green';\n  } else {\n    htmlgraphicsText.style.color = 'red';\n  }\n}\n",
        "onInitOnResize": false,
        "onRender": "if (!data || data.series.length === 0) {\n  htmlNode.innerHTML = \"<p>Sem dados.</p>\";\n  return;\n}\n\n// Extrair campos\nconst func = data.series[0].fields[5].values;\nconst ramUsage = data.series[0].fields[8].values;\nconst diskUsage = data.series[0].fields[4].values;\nconst temperatura = data.series[0].fields[9].values;\nconst critical = data.series[0].fields[1].values;\nconst nomes = data.series[0].fields[3].values;\nconst data_corrente = data.series[0].fields[11].values;\nconst ativo = data.series[0].fields[0].values;\nconst id = data.series[0].fields[2].values;\n\nlet html = `\n  <style>\n    .card-container {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 16px;\n      font-family: sans-serif;\n    }\n    .card {\n      width: 240px;\n      padding: 14px;\n      border-radius: 10px;\n      box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n\n      position: relative;\n      border: 2px solid transparent;\n      transition: all 0.3s ease;\n      text-align: center;\n    }\n    .card.yes {\n      border-color: #ef4444;\n    }\n    .card.offline {\n      background-color: #fef2f2;\n    }\n    .card h3 {\n      margin: 0;\n      font-size: 18px;\n      color: #111827;\n    }\n    .card p {\n      margin: 4px 0;\n      font-size: 14px;\n    }\n    .status {\n      font-weight: bold;\n      margin-top: 8px;\n      padding: 4px 8px;\n      border-radius: 6px;\n      display: inline-block;\n    }\n    .online {\n      background-color: #16a34a;\n      color: white;\n    }\n    .offline {\n      background-color: #dc2626;\n      color: white;\n    }\n    .id {\n      color: green;\n    }\n    .nome {\n      color:white;\n    }\n    .ativo {\n      color: green;\n    }\n  </style>\n\n  <div class=\"card-container\">\n`;\n\nfor(let i = 0; i < id.length; i++){\n  html += `\n    <div class=\"card\">\n      <h3><span class=\"nome\">${nomes[i]}</span> || Ativo<br> <span class=\"ativo\">${ativo[i] == 1? 'UP' : 'DOWN'}</span></h3>\n    </div>`\n}\n\n\nhtml += \"</div>\";\nhtmlNode.innerHTML = html;\n\n\nconsole.log(data);",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.1.1",
      "targets": [
        {
          "columns": [],
          "data": "device_id,device_name,group,critical,function,pico_rede_mbps,temperatura_c,tempo_uso_horas,ram_uso_percent,disco_uso_percent,timestamp\n1,SRV-WEB-01,Servidor,yes,HTTP+Disk+CPU,950,72,162,45.4,45.9,2025-06-01\n",
          "datasource": {
            "type": "yesoreyeram-infinity-datasource",
            "uid": "deonfk7bniby8b"
          },
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "parser": "backend",
          "refId": "A",
          "root_selector": "",
          "source": "url",
          "type": "csv",
          "url": "http://localhost:8000/grupo_servidor.csv",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        }
      ],
      "title": "",
      "transparent": true,
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "yesoreyeram-infinity-datasource",
        "uid": "deonfk7bniby8b"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 15,
        "w": 12,
        "x": 0,
        "y": 11
      },
      "id": 15,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "\n",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "",
        "onInit": "// Sets the text from customProperties\nconst htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\n\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = customProperties.text;\n\n  // Change the text color based on the theme\n  if (theme.isDark) {\n    htmlgraphicsText.style.color = 'green';\n  } else {\n    htmlgraphicsText.style.color = 'red';\n  }\n}\n",
        "onInitOnResize": false,
        "onRender": "if (!data || data.series.length === 0) {\n  htmlNode.innerHTML = \"<p>Sem dados.</p>\";\n  return;\n}\n\n// Extrair campos\nconst func = data.series[0].fields[5].values;\nconst ramUsage = data.series[0].fields[8].values;\nconst diskUsage = data.series[0].fields[4].values;\nconst temperatura = data.series[0].fields[9].values;\nconst critical = data.series[0].fields[1].values;\nconst nomes = data.series[0].fields[3].values;\nconst data_corrente = data.series[0].fields[11].values;\nconst ativo = data.series[0].fields[0].values;\nconst id = data.series[0].fields[2].values;\n\nlet html = `\n  <style>\n    .card-container {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 16px;\n      font-family: sans-serif;\n    }\n    .card {\n      width: 240px;\n      padding: 14px;\n      border-radius: 10px;\n      box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n      position: relative;\n      border: 2px solid transparent;\n      transition: all 0.3s ease;\n    }\n    .card.yes {\n      border-color: #ef4444;\n    }\n    .card.offline {\n      background-color: #fef2f2;\n    }\n    .card h3 {\n      margin: 0;\n      font-size: 18px;\n      color: #111827;\n    }\n    .card p {\n      margin: 4px 0;\n      font-size: 14px;\n    }\n    .status {\n      font-weight: bold;\n      margin-top: 8px;\n      padding: 4px 8px;\n      border-radius: 6px;\n      display: inline-block;\n    }\n    .online {\n      background-color: #16a34a;\n      color: white;\n    }\n    .offline {\n      background-color: #dc2626;\n      color: white;\n    }\n    .id {\n      color: green;\n    }\n    .nome {\n      color:white;\n    }\n    .ativo {\n      color: green;\n    }\n  </style>\n\n  <div class=\"card-container\">\n`;\n\nfor(let i = 0; i < id.length; i++){\n  html += `\n    <div class=\"card\">\n      <h3><span class=\"nome\">${nomes[i]}</span></h3>\n      <p>${func[i]}</p>\n      <p><span>RAM: ${ramUsage[i]}%</span> | <span>DISK: ${diskUsage[i]}MB</span> | <span>TEMP: ${temperatura[i]}ºC</span></p>\n    </div>`\n}\n\n\nhtml += \"</div>\";\nhtmlNode.innerHTML = html;\n\n\nconsole.log(data);",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.1.1",
      "targets": [
        {
          "columns": [],
          "data": "device_id,device_name,group,critical,function,pico_rede_mbps,temperatura_c,tempo_uso_horas,ram_uso_percent,disco_uso_percent,timestamp\n1,SRV-WEB-01,Servidor,yes,HTTP+Disk+CPU,950,72,162,45.4,45.9,2025-06-01\n",
          "datasource": {
            "type": "yesoreyeram-infinity-datasource",
            "uid": "deonfk7bniby8b"
          },
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "parser": "backend",
          "refId": "A",
          "root_selector": "",
          "source": "url",
          "type": "csv",
          "url": "http://localhost:8000/grupo_servidor.csv",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        }
      ],
      "title": "",
      "transparent": true,
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "yesoreyeram-infinity-datasource",
        "uid": "deonfk7bniby8b"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "semi-dark-blue",
                "value": 0
              }
            ]
          },
          "unit": "Mbits"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 11,
        "w": 12,
        "x": 12,
        "y": 11
      },
      "id": 16,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "/.*/",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "columns": [
            {
              "selector": "timestamp",
              "text": "",
              "type": "timestamp"
            },
            {
              "selector": "pico_rede_mbps",
              "text": "",
              "type": "number"
            }
          ],
          "computed_columns": [
            {
              "selector": "$server",
              "text": "",
              "type": "string"
            }
          ],
          "data": "device_id,device_name,group,critical,function,pico_rede_mbps,temperatura_c,tempo_uso_horas,ram_uso_percent,disco_uso_percent,timestamp\n1,SRV-WEB-01,Servidor,yes,HTTP+Disk+CPU,950,72,162,45.4,45.9,2025-06-01\n",
          "datasource": {
            "type": "yesoreyeram-infinity-datasource",
            "uid": "deonfk7bniby8b"
          },
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "parser": "backend",
          "refId": "A",
          "root_selector": "",
          "source": "url",
          "type": "csv",
          "url": "http://localhost:8000/grupo_servidor.csv",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        }
      ],
      "title": "",
      "transformations": [
        {
          "id": "reduce",
          "options": {
            "includeTimeField": false,
            "mode": "reduceFields",
            "reducers": [
              "max"
            ]
          }
        }
      ],
      "transparent": true,
      "type": "stat"
    }
  ],
  "preload": false,
  "schemaVersion": 41,
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "text": "",
          "value": ""
        },
        "datasource": {
          "type": "yesoreyeram-infinity-datasource",
          "uid": "deonfk7bniby8b"
        },
        "definition": "",
        "includeAll": false,
        "label": "Server",
        "name": "server",
        "options": [],
        "query": {
          "infinityQuery": {
            "columns": [
              {
                "selector": "device_name",
                "text": "",
                "type": "string"
              }
            ],
            "filters": [],
            "format": "table",
            "parser": "backend",
            "refId": "variable",
            "root_selector": "",
            "source": "url",
            "type": "csv",
            "url": "http://localhost:8000/grupo_servidor.csv",
            "url_options": {
              "data": "",
              "method": "GET"
            }
          },
          "query": "",
          "queryType": "infinity"
        },
        "refresh": 1,
        "regex": "",
        "type": "query"
      },
      {
        "allowCustomValue": false,
        "current": {
          "text": "",
          "value": ""
        },
        "datasource": {
          "type": "yesoreyeram-infinity-datasource",
          "uid": "deonfk7bniby8b"
        },
        "definition": "",
        "hide": 2,
        "name": "pico",
        "options": [],
        "query": {
          "infinityQuery": {
            "columns": [
              {
                "selector": "pico_rede_mbps",
                "text": "",
                "type": "number"
              }
            ],
            "filters": [],
            "format": "table",
            "parser": "backend",
            "refId": "variable",
            "root_selector": "",
            "source": "url",
            "type": "csv",
            "url": "http://localhost:8000/grupo_servidor.csv",
            "url_options": {
              "data": "",
              "method": "GET"
            }
          },
          "query": "",
          "queryType": "infinity"
        },
        "refresh": 1,
        "regex": "",
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "2025-06-01T05:32:11.981Z",
    "to": "2025-06-01T11:44:33.322Z"
  },
  "timepicker": {},
  "timezone": "Africa/Luanda",
  "title": "08",
  "uid": "3b8effa3-84fd-4011-8c61-dbf195df557a",
  "version": 12
}
